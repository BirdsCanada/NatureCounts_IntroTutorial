[["index.html", "NatureCounts: An Introductory R Tutorial Welcome to NatureCounts", " NatureCounts: An Introductory R Tutorial Danielle Ethier Version 2: October 2021 Welcome to NatureCounts NatureCounts is the gateway to avian citizen science data collected in North American, with an emphasis on Canadian datasets managed by Birds Canada. The purpose of this workbook is to provide you with the basic tools and skills you will need to get started using the naturecounts R package. Lets get started! "],["Intro1.html", "Chapter 1 Introduction 1.1 NatureCounts and R 1.2 Prerequisites 1.3 Acknowledgements", " Chapter 1 Introduction NatureCounts is a website hosted and managed by Birds Canada, Canadas leading scientific non-government organization dedicated to increasing the understanding, appreciation and conservation of wild birds and their habitats . Birds Canada specializes in citizen science long-term monitoring programs using a partnership-based model. Citizen science has been found to be the most cost-effective way to monitor bird populations across large geographic areas. In Canada, over 16,000 volunteers are currently involved in Birds Canadas programs. Launched in January 2008, NatureCounts is the first Canadian node of the Avian Knowledge Network. It serves as an online data dissemination portal to facilitate the collection, management and sharing of biological data. NatureCounts hosts hundreds of datasets, representing well over 140 million occurrences of birds. These include virtually all of Birds Canadas monitoring initiatives, such as Breeding Bird Atlases, eBird Canada, the Marsh Monitoring Program, Nocturnal Owl Surveys, as well as many other major initiatives to which Birds Canada contributes in some capacity (e.g., Canadian Migration Monitoring Program, HawkCount and the Raptor Population Index, Monarch Knowledge Network, Breeding Bird Survey, Christmas Bird Count, Project FeederWatch). What can you do on the NatureCounts webportal? You can explore the data resources of NatureCounts via interactive maps that allow you to view the distribution of bird populations during any time of the year and across a variety of different sources. You can obtain and visualize information on long term population trends of Canadian birds. You can explore an individual species pattern of distribution or the species richness of a location via dynamically generated summary tables and graphs. Finally, much of the observational data can be downloaded for your own personal research! 1.1 NatureCounts and R The naturecounts R package was create to allow users to directly access and download data from NatureCounts into R. The goal of this online book is to show NatureCounts users how to use the R statistical programming language to access, filter, summarize, and visualize naturecounts data. Moving forward, we intend to create more advanced tutorials which explore analytical procedures suitable for various datasets. If you have suggestions for additional content, please let us know by emailing dethier@birdscanada.org Note you can differentiate the R package (naturecounts) from the database (NatureCounts) Throughout this book we use subsets of real datasets to illustrate how to access, manage, explore and visualize NatureCounts data in R. We recommend that you run through the sample code in each chapter with the sample dataset before doing the exercises or using own data. Answers to the exercises can be found in Chapter 7. 1.2 Prerequisites This book assumes that you have a basic understanding of R. We recommend that you become familiar with R for Data Science by Garrett Grolemund and Hadley Wickham, which covers how to import, visualize, and summarize data in R using the tidyverse collection of R packages. 1.3 Acknowledgements The text in this document were adapted from the NatureCount webpage and the NatureCounts GitHub repository. The structure of this book follows that of the Motus R Book. Online tutorials are available for the naturecounts R-package, which are referenced throughout this document. You are encouraged to review these tutorials for additional examples and more advanced options. Many people have contributed to the NatureCounts web interface and the R package, including, Denis Lepage, Steffi LaZerte, Paul Morrill and Catherine Jardine. The development of the NatureCounts web interface, R package, and accompanying online book were made possible by funding provided by Environment and Climate Change Canada and the generosity of donors to Birds Canada. Thank you! "],["Package2.html", "Chapter 2 Loading R Packages 2.1 Installing naturecounts 2.2 Additional packages", " Chapter 2 Loading R Packages The functionalities of some packages may require updated versions of R and RStudio. To avoid errors, please ensure you are using the most recent releases of R and RStudio, and update your R packages. update.packages() 2.1 Installing naturecounts You can install naturecounts from GitHub with the remotes package: install.packages(&quot;remotes&quot;) remotes::install_github(&quot;BirdStudiesCanada/naturecounts&quot;) After installation, you need to load the package each time you open a new R session. library(naturecounts) 2.2 Additional packages Throughout the book we use the tidyverse R package, which is actually a collection of R packages for data science, including tidyr, dplyr, and ggplot2, among others. The tidyverse package can be installed from CRAN and loaded into R as follows: install.packages(&quot;tidyverse&quot;) library(tidyverse) You may find additional packages are needed to manipulate and visualize your data. For example, if you are interested in Mapping Observation a suite of packages need to be installed and loaded. The process is similar to that previously describe. "],["Data3.html", "Chapter 3 Understanding and Viewing Data 3.1 Data Structure 3.2 Levels of Data Access 3.3 Authorizations 3.4 Viewing information about NatureCounts collections 3.5 Metadata codes and decriptions 3.6 Region &amp; Species filtering 3.7 Examples 3.8 Exercises", " Chapter 3 Understanding and Viewing Data This chapter begins with a brief introduction to the structure of the NatureCounts database, followed by a description of access levels and how to create a user account. We then provide instructions on how to view data from various collections and apply filters. The code in this Chapter will not work unless you replace \"testuser\" with your actual user name. You will be prompted to enter your password. 3.1 Data Structure The Bird Monitoring Data Exchange (BMDE) was developed to be a standardized data exchange schema to promote the sharing and analysis of avian observational data. The schema is the core sharing standard of the Avian Knowledge Network.The BMDE (currently version 2.0) includes 169 core fields (variables) that are capable of capturing all metrics and descriptors associated with a bird observation. The BMDE schema was extended in 2018, and the complete version now includes 265 fields (variables). Fields are variables or columns in a data set By default, the naturecounts package downloads the data with the minimum set of fields/columns. However, for more advanced applications, users may wish to specify which fields/columns to return using the field_set and fields options in the nc_data_dl() function. For help with this feature, see the naturecounts article Selecting columns and fields to download. 3.2 Levels of Data Access NatureCounts hosts many datasets, representing in excess of 170 million occurrence records, with a primary focus on Canadian bird monitoring data. Many of those datasets are from projects lead by Birds Canada and/or its partners. While we strive to make our data as openly available as possible, we also need to recognize the needs of our partners and funders. NatureCounts has five Levels of Data Access, which define how each dataset can be used. Those levels are set individually for each dataset, in consultation with the various partners and data custodians involved. Level 0: most restricted (archival only) Level 1: archival only, metadata visible Level 2: data used for visualizations only Level 3: data available to third parties by request Level 4: data shared with external portals and available by request Level 5: open access All contributing members of NatureCounts have complete authority over the use of the data they have provided, and can withhold data at any time from any party or application. All users of any NatureCounts data must clearly acknowledge the contribution of the members who are making data available. Each dataset comes with its own Data Sharing Policy that defines the various conditions for data usage. You can view the Data Access Level for each collection on the NatureCounts Datasets page or using the metadata function (see akn_level): collections&lt;-meta_collections() View(collections) You can create a stand alone table for any metadata table using similar syntax as above 3.3 Authorizations To access data using the naturecounts R package, you must sign up for a free account. Further, if you would like to access Level 3 or 4 collections you must make a data request. For step-by-step visual instructions, we encourage you to watch: NatureCounts: An Introductory Tutorial. Create your free account now before continuing with this workbook 3.4 Viewing information about NatureCounts collections First, lets use the naturecounts R package to view the number of records available for different collections. To do this we use the nc_count() function. You can view all the available collections and the number of observations using the default setting. If a username is provided, the collections are filtered to only those available to the user. Otherwise all counts from all data sources are returned (default: show = \"all\"). nc_count() Or you can view the collections for which you have access using your username/password. nc_count(username = &quot;testuser&quot;) Further refinements can be applied to the nc_count() function using filters Options include: collections, project_id, species, years, doy (day-of-year), region, and site_type. 3.5 Metadata codes and decriptions There are metadata associated with the various arguments used in the nc_count() and nc_data_dl() functions, the latter you will use in Chapter 4. These are stored locally and can be accessed anytime to help filter your data view or download query. They include: meta_country_codes(): country codes meta_statprov_codes(): state/Province codes meta_subnational2_codes(): subnational2 codes meta_iba_codes(): Important Bird Area (IBA) codes meta_bcr_codes(): Bird Conservation Region (BCR) codes meta_utm_squares(): UTM Square codes meta_species_authority(): species taxonomic authorities meta_species_codes(): alpha-numeric codes for avian species meta_species_taxonomy(): codes and taxonomic information for all species meta_collections(): collections names and descriptions meta_breeding_codes(): breeding codes and descriptions meta_project_protocols(): project protocols meta_projects(): projects ids, names, websites, and descriptions meta_protocol_types(): protocol types and descriptions You can explore the metadata materials using two lines of code. For example, you can view the Important Bird Area (IBA) metadata using: iba&lt;-meta_iba_codes() View(iba) 3.6 Region &amp; Species filtering Filtering will often be done based on geographic extent (i.e., region). To filtering by region you must provide a named list with one of the following: country: country code (e.g., CA for Canada) statprov: state/province code (e.g., MB for Manitoba) subnational2: subnational (type 2) code (e.g., CA.MB.07 for the Brandon Area) iba: Important Bird Areas (IBA) code (e.g., AB001 for Beaverhill Lake in Alberta) bcr: Bird Conservation Regions (e.g., 2 for Western Alaska) utm_squares: UTM square code (e.g., 10UFE96 for a grid in Alberta) bbox: bounding box coordinates (e.g., c(left = -101.097223, bottom = 50.494717, right = -99.511239, top = 51.027557) for a box containing Riding Mountain National Park in Manitoba). On the NatureCounts web portal there is a handy Within Coordinates) tool to help you retrieve custom coordinates for your data query and/or download. To use the region argument: nc_count(region=list(statprov=&quot;ON&quot;)) Another commonly used filter is specific to species. In order to filter by species you need to get the species id codes. These are numeric codes that reflect species identity. For all species, you can search by scientific, English or French name with the search_species() function. search_species(&quot;chickadee&quot;) For birds, you can also search by alphanumeric species codes with the search_species_code() function. This function also gives you the option of returning all species codes (including subspecies) related to a single species, and is considered a more robust method for ensuring that you do not miss observations. search_species_code(&quot;BCCH&quot;) For additional examples and more advanced options are available online for retrieving Region and Species codes. 3.7 Examples Here are a few examples for you to work through to become familiar with the nc_count() function. Example 1: Determine the number of collections and records for a specific region. The options include: country, statprov, subnational2, iba, bcr, utm_squares, and bbox. You can find details and examples on how to search_region() at the link provided. The following code will retrieve all available collections and number of records for British Columbia search_region(&quot;British Columbia&quot;, type = &quot;statprov&quot;) nc_count(region = list(statprov = &quot;BC&quot;)) Example 2: Determine the number of records for a specific species. You can find details and examples on how to search_species_code() based on 4 letter alpha code and search_species() based on common names at the links provided. The following code will retrieve all available collections and number of records for Red-headed Woodpecker search_species(&quot;Red-headed Woodpecker&quot;) search_species_code(&quot;RHWO&quot;) RHWO&lt;-nc_count(species = 10060) View(RHWO) Example 3: We can further refine the Red-headed Woodpecker example (above) by filtering the species-specific data by region (e.g., Bird Conservation Region 11), time period (e.g., 2015-2019), or a combination of both. RHWO_11&lt;-nc_count(species = 10060, region = list(bcr = &quot;11&quot;)) View(RHWO_11) RHWO_year&lt;-nc_count(species = 10060, year = c(2015, 2019)) View(RHWO_year) RHWO_11_year&lt;-nc_count(species = 10060, region = list(bcr = &quot;11&quot;), year = c(2015, 2019)) View(RHWO_11_year) 3.8 Exercises Now apply your newly acquired skills! Exercise 1: If you are interesting in doing a research project on Snowy Owls in Quebec, which three collections are you most likely to consider using (i.e., which have the most data)? Answer: EBird-CA-QC, OISEAUXQC, CBC Exercise 2: How many records of Gadwal are in the British Columbia Coastal Waterbird Survey collection? What if you are only interested in records from 2010-2019, how many records are available? Answer: 702, 389 Full answers to the exercises can be found in Chapter 7. "],["Download4.html", "Chapter 4 Downloading and Filtering Data 4.1 Downloading NatureCounts data 4.2 Applying Filters 4.3 Examples 4.4 Exercises", " Chapter 4 Downloading and Filtering Data This chapter jumps right into downloading NatureCounts data, which builds directly on the skills developed in Chapter 3. 4.1 Downloading NatureCounts data To download data you need to sign up for a free account. The code in this Chapter will not work unless you replace \"testuser\" with your actual user name. You will be prompted to enter your password. Here we demonstrate how to download the Ontario Whip-poor-will collection (WPWI), since it is Open Access (Level 5) and contains relatively few records (n = 3012). Click here for more information on this dataset. WPWI &lt;- nc_data_dl(collections = &quot;WPWI&quot;, username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) You should now see a copy of the WPWI collection in the upper right panel of RStudio under the Environment tab. Notice in the code that info needs to be provided. This is a short description of reason for the download. This does not need to be specified when using the nc_count() function. To access Level 3 or 4 collections you must sign up for a free account and request permission from the data custodian. For a complete list of datasets and access level, visit the NatureCounts datasets page or use the meta_collection() function. Here you can browse information on each dataset prior to requesting access. To make a data request, use the NatureCounts Download Data query tool. For step-by-step visual instructions, we encourage you to watch: NatureCounts: An Introductory Tutorial. You will receive an email confirmation when your request has been approved, which will contain your request_id. This number will be used to download your newly acquired dataset into R. There is also a build in function that allows you to check the status of your request and retrieve your request_id: nc_requests(username = &quot;testuser&quot;) Here is sample code to download Access Level 3 or 4 data: my_data &lt;- nc_data_dl(request_id = 000000, username = &quot;USER&quot;, info = &quot;MY REASON&quot;) Note: This code is not functional and is here to serve as a structural example. You will need to insert your request_id, username, and info in the code chunk above to make this work. If you applied filters to the web portal data request (e.g., species, region, year), you will only receive the subset of the dataset you requested. 4.2 Applying Filters The filters applied in Chapter 3 when using the nc_count() view function are also used for the nc_data_dl() download function. Again, these options include: collections, project_id, species, years, doy (day-of-year), region, and site_type. You may also wish to specify which fields/columns to return using the field_set and fields options in the nc_data_dl() function. For help with this feature, see the naturecounts article Selecting columns and fields to download. Please review the resources provided on filter metadata prior to proceeding. The users can specify up to 3 filter options in the download process and should try to limit redundancies in filters. In most cases, one of these options will be collections, since authorization is given independently for each dataset (i.e., collection). If the user chooses to select species, then only collections the user has authorization to access will be used to retrieve species-specific data. This differs from the nc_count() function, which by default shows you all the records available in each collection. 4.3 Examples Here are a few examples for you to work through to become familiar with the nc_data_dl() function. Example 1: We will use the Ontario Whip-poor-will collection (WPWI) again for this example. After reviewing the online material, here, you notice that the main survey ran from 2010 to 2012, but that additional surveys were conducted between 2009 and 2013. For your research, you only want data collected during the main survey window. Further, the survey was Ontario-wide, but most effort and records are from southern Ontario. Lets further limit the data to those collected south of the Canadian Shield, which is approximated with BCR 13. WPWI_filter &lt;- nc_data_dl(collections = &quot;WPWI&quot;, years = c(2010, 2012), region = list(bcr = &quot;13&quot;), username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) You will notice that the number of records in the filtered WPWI download (WPWI_filter = 754) is substantially less than the number of records in the full dataset (WPWI = 3012) downloaded in Chapter 3. Example 2: Rather than using BCR 13 to approximate the study area, you are interested in just looking at records collected on the Bruce Peninsula for the full time period. You decide to use spatial data to filter observations. Specifically, you create a bounding box, using the Within Coordinates) tool to help you retrieve custom coordinates for your data query and/or download. WPWI_bp &lt;- nc_data_dl(collections = &quot;WPWI&quot;, region = list(bbox = c(left = -81.7, bottom = 44.5, right = -80.9, top = 45.3)), username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) You will notice there are now even fewer observation records (WPWI_bp = 72) 4.4 Exercises Now apply your newly acquired skills! Exercise 1: You are from the Northwest Territories and interested in learning more about breeding birds in your region. First, you identify the NatureCounts dataset most suitable for this exercise using the nc_count() function. Next, you decide to focus your download to only include Blackpoll Warbler data collected over the past 5 years (2015-2020). How many observation records did you download? Answer: BBS50-CAN, 1756 Exercise 2: You are birding in the Beaverhill Lake Important Bird Area (iba) in May. You think you hear a Bobolink! You are curious if this species has been detected here in the month of May. You choose to download the records you have authorization to freely access from NatureCounts. How many observation records did you download? What year are these records from? Answer: 3, 1988 &amp; 1987 Answers to the exercises can be found in Chapter 7. "],["Manip5.html", "Chapter 5 Data Manipulation 5.1 Basic data wrangling 5.2 Combine datasets 5.3 Helper functions 5.4 Exercies", " Chapter 5 Data Manipulation You have successfully downloaded your NatureCounts dataset and are ready to explore and summarise the data. In this chapter we will demonstrate how to do some basic data manipulations and summaries. The possibilities are endless, so we try to focus on examples we think would be most valuable to users. We intend to develop collection and protocol_id specific data manipulation and analysis code in the future. If you have specific requests or would like to contribute your existing code, please contact dethier@birdscanada.org. The code in this Chapter will not work unless you replace \"testuser\" with your actual user name. You will be prompted to enter your password. 5.1 Basic data wrangling Recall in Chapter 2 you installed the tidyverse package, which included dplyr for data manipulations. You are encouraged to learn more about this function by reviewing the Data Transformations chapter in R for Data Science by Hadley Wickham and Garrett Grolemund. We also recommend you download a copy of the RStudio Data Wrangling cheat sheet as a reference document. We are going to apply three key dplyr functions which will give you some of the basic tools needed to solve the vast majority of your data manipulation challenges. These functions include: select(): Pick variables by their names (columns) filter(): Pick observations by their values (rows) summarise(): Collapse many values down to a single summary (often with group_by()) Lets continue using the full Ontario Whip-poor-will collection for this chapter. WPWI &lt;- nc_data_dl(collections = &quot;WPWI&quot;, username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) 5.1.1 Select You will notice that NatureCounts datasets have many fields (i.e., columns) available. Generally, you will only want a few of these fields for your summary or analysis. Recall the complete version of the BMDE includes 265 fields. The number of variables downloaded from the BMDE will depend on the fields_set, which is by default minimum (57 fields). You can narrow in on the variables you are interested in with the select() function, which allows you to subset the dataframe based on the names of the variables. For example, we are going to select() a subset of variables from the WPWI dataset that we need for our summary: WPWI_select &lt;- select(WPWI, &quot;SurveyAreaIdentifier&quot;, &quot;RouteIdentifier&quot;, &quot;species_id&quot;, &quot;latitude&quot;, &quot;longitude&quot;, &quot;bcr&quot;, &quot;survey_day&quot;, &quot;survey_month&quot;, &quot;survey_year&quot;) 5.1.2 Filter Often there are observational records in a database that are not needed. We could have filtered these records out using the nc_data_dl() filters. However, we can also use the dplyr::filter() function, which allows us to subset observations based on their row values. Observations are selected using: Comparison operators:&gt;, &gt;=, &lt;, &lt;=, != (not equal), == (equal) Logical operators: &amp; (and), | (or), ! (is not) There are worked examples provided in the naturecounts article Filtering data after download to get you started with applying filters. These include: Categorical filters Numerical filters Date filters Here we provide a few additional examples for you to work with. First, lets apply a simple filter() that subsets the data based on a single survey month: WPWI_June &lt;- filter(WPWI_select, survey_month == 6) Now lets try multiple survey months by adding a logical operator: WPWI_JJ &lt;- filter(WPWI_select, survey_month == 6 | survey_month == 7) #Alternatively this can be written as: WPWI_JJ &lt;- filter(WPWI_select, survey_month %in% c(6,7)) We can continue to add to the complexity of our filter: WPWI_multi &lt;- filter(WPWI_select, survey_month %in% c(6,7) &amp; bcr == 12 &amp; survey_year &gt;= 2010 &amp; survey_year &lt;= 2012) 5.1.3 Summarise Now that we have selected the columns we need for our analysis we will demonstrate how to summarise the data. The summarise() function is most useful if paired with the group_by() argument, because this changes the unit of analysis from the complete dataset to individual groups. For example, say we want to determine how many point count stops were on each WPWI Route. We will want to group observations by RouteIdentifier and summarise the number of district SurveyAreaIdentifier. WPWI_Route &lt;- group_by(WPWI_select, RouteIdentifier) WPWI_Route &lt;- summarise(WPWI_Route, Nstops = n_distinct(SurveyAreaIdentifier)) However, now that were getting on to more complex operations, well introduce the use of the pipe %&gt;%. This allows you to pass (pipe) the output of one line as input to the next line. Therefore, the previous code can be re-written as: WPWI_Route &lt;- WPWI_select %&gt;% group_by(RouteIdentifier) %&gt;% summarise(Nstops = n_distinct(SurveyAreaIdentifier)) View(WPWI_Route) Note that there is a pipe (%&gt;%) between each set of lines and that the data (WPWI_select) is only referred to once, at the very start. These two different codes achieve the exact same result. Back to our example, we might also want to know how many routes where run in each year. WPWI_Year &lt;- WPWI_select %&gt;% group_by(survey_year) %&gt;% summarise(Nroute = n_distinct(RouteIdentifier)) View(WPWI_Year) Finally, lets look to see how many Observations of WPWI were made in each year. Since each row of data represents a survey point, we want to count the number of rows containing species_id = 7871 within each unique year. We can do this by first removing the NA using the filter function, and then use the group_by and summarise to determine the length of the dataset (i.e., the number of rows with WPWI sightings). WPWI_Obs &lt;- WPWI_select %&gt;% filter (species_id != &quot;NA&quot;) %&gt;% group_by(survey_year) %&gt;% summarise(SumObs=length(species_id)) View(WPWI_Obs) 5.2 Combine datasets There are many reasons to join two datatables. For example, if you have species observations across several years you might want to associate these with weather covariates to assess if they are correlated. Or you might have observations over a specific geographic region, which you wish to associate with land cover covariates. To do this, you will want to join (merge) two tables. Looking at the Data Wrangling cheat sheet, you will notice there are several join functions. In all instances, you will need to specify the key variable, which is found in both tables, which is used for binding the tables together. Here we provide an example using metadata available to you in naturecounts. When you pull collections with the minimum fields_set (default) you will notice you get the species_id column, but not alpha species code. For example, lets pull a small amount of data from the second Alberta Breeding Bird Atlas (ABATLAS2) from Beaverhill Lake Important Bird Area (AB001) in 2005. AB_Atlas&lt;-nc_data_dl(collections=&quot;ABATLAS2&quot;, region=list(iba = &quot;AB001&quot;), years=2005, username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) Notice there are 57 variables, including is a numeric species_id, but no alpha species code. To rectify this, there are two options: Set the fields_set argument to extended. AB_Atlas2&lt;-nc_data_dl(collections=&quot;ABATLAS2&quot;, region=list(iba = &quot;AB001&quot;), years=2005, fields_set=&quot;extended&quot;, username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) Notice you are now pulling 285 variables, including the CommonName. However, for this particular dataset, there is still no alpha code (SpeciesCode). Most datasets will have these in the BMDE, this one does not. Lets add them using the an auxiliary table. Create a species code table using the available metadata and then join this to your existing data table. First, identify the appropriate taxonomic authority using the metadata. authority&lt;-meta_species_authority() View(authority) Second, pull the species code table, and filter for the ABATLAS2 authority. species&lt;-meta_species_codes() View(species) species&lt;-species %&gt;% filter(authority==&quot;ABATLAS2&quot;) Third, join your tables so that it includes the desired species information. AB_Atlas_sp&lt;-left_join(AB_Atlas, species, by=&quot;species_id&quot;) Now your datatable contains the species code, which is familar to most birders. You can also try joining the Atlas data to the meta_species_taxonomy() table if you wish to capture the english common, french, or scientific names, amoung other fields. 5.3 Helper functions There are a few additional helper functions built into the naturecounts R package that you may find useful. At present, they include: format_dates():Creates and adds date and day-of-year (doy) field/columns to data formate_zero_fill(): Zero-fill the species presence data by adding zero observations counts (absences) to an existing NatureCounts dataset The zero-fill function is particularly important if you want to ensure your dataset is complete! 5.4 Exercies Exercise 1: You are doing a research project using the fall migration monitoring data collected at Vaseux Lake Bird Observatory, British Columbia. You request the open access data from 2017-2020. After you request this subset of the collection, you need to determine the number of unique days Gray catbirds were records in each year? Answer: 2017 = 54 2018 = 53 Exercise 2: Building off the same dataset used in Exercise 1, you now want to zero-fill the dataframe to ensure it is complete for your study on Gray catbirds. How many records (rows) are in the zero-fill Gray catbird dataframe? Answer: 152 Answers to the exercises can be found in Chapter 7. "],["Visual6.html", "Chapter 6 Data Visualisation 6.1 Plotting 6.2 Mapping", " Chapter 6 Data Visualisation You have successfully downloaded and summarised your NatureCounts dataset. In this chapter we will demonstrate how to do some basic visualizations with plots. The code in this Chapter will not work unless you replace \"testuser\" with your actual user name. You will be prompted to enter your password. 6.1 Plotting Plotting your data is a powerful way to detect patterns and make results stand out. Recall in Chapter 2 you installed the tidyverse package, which included ggplot2 for data visualizations. You are encouraged to learn more about this function by reviewing Cookbook for R. We also recommend you download a copy of the RStudio Data Visualization cheat sheet as a reference document. At the end of Chapter 5 you were exploring fall migration monitoring data collected at Vaseux Lake Bird Observatory, British Columbia. Lets continue using this dataset for our plotting example and download the data for 2015-present. First, lets apply our previously acquired skills to download the filtered dataset and zero-fill for GRCA, while also keep some extra variables. library(naturecounts) library(tidyverse) VLBO &lt;- nc_data_dl(collections = &quot;CMMN-DET-VLBO&quot;, years = c(2015, NA), username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) GRCA &lt;- format_zero_fill(VLBO, species = 15900, by = &quot;SamplingEventIdentifier&quot;, extra_event= c(&quot;survey_year&quot;, &quot;survey_month&quot;, &quot;survey_day&quot;)) First, we are interested if there are any noticeable patterns in migration timing. For this, we will use the add date and day-of-year helper function, introduced at the end of Chapter 5, to add two new columns to the dataframe. GRCA_dates &lt;- format_dates(GRCA) Now we can plot raw counts (y-axis) for each day-of-year (x-axis). ggplot(data = GRCA_dates) + geom_point(aes(x = doy, y = ObservationCount)) What you will notice is that migration for this species is highest early in the year and diminishes with time. Next, we are interested in visually examining the mean number of migrant GRCA each year, to see if there are any noticeable changes over time. First, we need to summarise the data: #use this shortcut function to calculate the standard error se &lt;- function(x) sd(x) / sqrt(length(x)) GRCA_year &lt;- GRCA %&gt;% group_by(survey_year) %&gt;% summarise(MeanObs = mean(ObservationCount), SEObs = se(ObservationCount)) %&gt;% mutate(yrmin = MeanObs + SEObs, yrmax = MeanObs - SEObs) ## `summarise()` ungrouping output (override with `.groups` argument) Now we can create the plot: ggplot(data = GRCA_year) + geom_pointrange(aes(x = survey_year, y = MeanObs, ymin = yrmin, ymax = yrmax)) You will notice there was an increase in the mean number of GRCA observed in the last three years, compared to 2015. You might now be wondering why. 6.2 Mapping There is a comprehensive tutorial online for Mapping Observation. The materials are not repeated here. We encourage you to check this out if are interested in mapping your data! "],["Ans7.html", "Chapter 7 Exercise Answers 7.1 Chapter 3 7.2 Chapter 4 7.3 Chapter 5", " Chapter 7 Exercise Answers 7.1 Chapter 3 Exercise 1: If you are interesting in doing a research project on Snowy Owls in Quebec, which three collections are you most likely to consider using (i.e., which have the most data)? search_species(&quot;Snowy Owl&quot;) search_region(&quot;Quebec&quot;, type = &quot;statprov&quot;) SNOW&lt;-nc_count(species=7450, region = list(statprov=&quot;QC&quot;)) View(SNOW) Answer: EBird-CA-QC, OISEAUXQC, CBC Exercise 2: How many records of Gadwal are in the British Columbia Coastal Waterbird Survey collection? What if you are only interested in records from 2010-2019, how many records are available? search_species(&quot;Gadwal&quot;) collection&lt;-collections&lt;-meta_collections() View(collection) GADW&lt;-nc_count(species=390, collections = &quot;BCCWS&quot;) View(GADW) GADW2&lt;-nc_count(species=390, collections = &quot;BCCWS&quot;, years =c(2010,2019)) View(GADW2) Answer: 702, 389 7.2 Chapter 4 Exercise 1: You are from the Northwest Territories and interested in learning more about birds in your region. First, you identify the NatureCounts dataset most suitable for this exercise using the nc_count() function (i.e., which has the most data). Next, you decide to focus your download to only include Blackpoll Warbler data collected over the past 5 years (2015-2020). How many observation records did you download? search_region(&quot;Northwest Territories&quot;, type = &quot;statprov&quot;) NT&lt;-nc_count(region = list(statprov=&quot;NT&quot;), username=&quot;testuser&quot;) View(NT) search_species(&quot;Blackpoll warbler&quot;) BLPW&lt;-nc_data_dl(collections=&quot;BBS50-CAN&quot;, species = 16820, years =c(2015, 2020), username=&quot;testuser&quot;, info=&quot;tutorial example&quot;) Answer: BBS50-CAN, 1756 Exercise 2: You are birding in the Beaverhill Lake Important Bird Area (iba) in May. You think you hear a Bobolink! You are curious if this species has been detected here in the month of May. You choose to download the records you have authorization to freely access from NatureCounts. How many observation records did you download? What year are these records from? search_region(&quot;Beaverhill Lake&quot;, type = &quot;iba&quot;) search_species(&quot;Bobolink&quot;) #May = doy 122-152 BOBO&lt;-nc_data_dl(region = list(iba=&quot;AB001&quot;), species= 19520, doy=c(122,152), username=&quot;testuser&quot;, info=&quot;tutorial example&quot;) View(BOBO) Answer: 3, 1988 &amp; 1987 7.3 Chapter 5 Exercise 1: You are doing a research project using the fall migration monitoring data collected at Vaseux Lake Bird Observatory, British Columbia. You request the open access data from 2017-2020. After you request this subset of the collection, you need to determine the number of unique days Gray catbirds were records in each year? collections&lt;-meta_collections() search_species(&quot;Gray Catbird&quot;) VLBO &lt;- nc_data_dl(collections = &quot;CMMN-DET-VLBO&quot;, species=15900, years = c(2017, 2020), username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) VLBO&lt;-format_dates(VLBO) #This step is not strictly required. GRCA&lt;-VLBO %&gt;% group_by(survey_year) %&gt;% summarize(day_distinct = n_distinct(doy)) #Could have alternatively counted the number of district `SamplingEventIdentifier` View(GRCA) Answer: 2017 = 54 2018 = 53 Exercise 2: Building off the same dataset used in Exercise 1, you now want to zero-fill the dataframe to ensure it is complete for your study on Gray catbirds. How many records (rows) are in the zero-fill Gray catbird dataframe? #You will pull all the data for this exercise, not just the records for Gray catbird. This ensures the zero-fill works correctly VLBO &lt;- nc_data_dl(collections = &quot;CMMN-DET-VLBO&quot;, years = c(2017, 2020), username = &quot;testuser&quot;, info = &quot;tutorial example&quot;) VLBO&lt;-format_zero_fill(VLBO) GRCA&lt;-VLBO %&gt;% filter(species_id==15900) #The number of records is the number of rows in the resulting dataframe. Answer: 152 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
